
# auth__client_id=39re9vikld4mp
# auth__client_secret=3eybtfya9zjm3k42n9crxw4hmqyg7zousqcnhevnpgn8tqp5lx

# crm__code=code from url
# crm__access_token=access_token


# Zoho
CRMS__ZOHO__CLIENT_ID=1000.2MG6UOQ34Z5QRW9VMP8P08WK2BNFFU
CRMS__ZOHO__CLIENT_SECRET=bdded2ea52eaded4315f5e4f8f14497ec7a77d0cdb
CRMS__ZOHO__CONFIG__AUTH_URL=https://accounts.zoho.com/oauth/v2/auth
CRMS__ZOHO__CONFIG__TOKEN_URL=https://accounts.zoho.com/oauth/v2/token
CRMS__ZOHO__CONFIG__SCOPE=ZohoCRM.modules.ALL
CRMS__ZOHO__CONFIG__REDIRECT_PATH=/integration/callback/zoho

# Capsule
CRMS__CAPSULE__CLIENT_ID=39re9vikld4mp
CRMS__CAPSULE__CLIENT_SECRET=3eybtfya9zjm3k42n9crxw4hmqyg7zousqcnhevnpgn8tqp5lx
CRMS__CAPSULE__CONFIG__AUTH_URL=https://api.capsulecrm.com/oauth/authorise
CRMS__CAPSULE__CONFIG__TOKEN_URL=https://api.capsulecrm.com/oauth/token
CRMS__CAPSULE__CONFIG__SCOPE=read write
CRMS__CAPSULE__CONFIG__REDIRECT_PATH=/integration/callback/capsule



           @router.get("/contacts")
def fetch_contacts(request: Request):
    try:
        # Get the CRM name from the query parameters
        crm_name = request.query_params.get("crm")
        if not crm_name:
            raise HTTPException(
                status_code=400,
                detail="CRM parameter required (e.g., ?crm=zoho)"
            )

        # Get tokens specifically for this CRM
        tokens = get_stored_tokens(crm_name.lower())
        if not tokens:
            raise HTTPException(
                status_code=401,
                detail=f"Authorization required for {crm_name}. Please authenticate first."
            )

        # Verify we have the required tokens
        access_token = tokens.get("access_token")
        refresh_token = tokens.get("refresh_token")
        if not access_token or not refresh_token:
            raise HTTPException(
                status_code=400,
                detail="Invalid token format. Missing required tokens."
            )

        # Get the page parameter
        try:
            page = int(request.query_params.get("page", 1))
        except ValueError:
            raise HTTPException(
                status_code=400,
                detail="Invalid page number"
            )

        # Get the appropriate plugin
        plugin = get_plugin(crm_name.lower())
        
        # Fetch contacts
        contacts = plugin.get_contacts(
            access_token=access_token,
            refresh_token=refresh_token,
            page=page
        )
        
        # Optionally save to JSON (you can remove this if not needed)
        save_contacts_to_json(contacts, f"{crm_name}_contacts.json")
        
        return {
            "status": "success",
            "crm": crm_name.lower(),
            "contacts": contacts,
            "message": f"Contacts fetched from {crm_name} CRM"
        }

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Failed to fetch contacts: {str(e)}"
        )


